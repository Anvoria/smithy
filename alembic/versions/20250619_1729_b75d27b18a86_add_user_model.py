"""add user model

Revision ID: b75d27b18a86
Revises: d5aceb9f23b1
Create Date: 2025-06-19 17:29:28.726003+00:00

"""

from typing import Sequence, Union

from alembic import op  # type: ignore
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "b75d27b18a86"
down_revision: Union[str, Sequence[str], None] = "d5aceb9f23b1"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "user",
        sa.Column(
            "email",
            sa.String(length=255),
            nullable=False,
            comment="User's email address",
        ),
        sa.Column(
            "username", sa.String(length=50), nullable=False, comment="User's username"
        ),
        sa.Column(
            "password_hash",
            sa.String(length=255),
            nullable=True,
            comment="Hashed password for authentication (null if using external auth)",
        ),
        sa.Column(
            "login_provider",
            sa.String(length=50),
            nullable=False,
            comment="Authentication provider used for login",
        ),
        sa.Column(
            "first_name",
            sa.String(length=191),
            nullable=True,
            comment="User's first name",
        ),
        sa.Column(
            "last_name",
            sa.String(length=191),
            nullable=True,
            comment="User's last name",
        ),
        sa.Column(
            "display_name",
            sa.String(length=191),
            nullable=True,
            comment="User's display name (if different from username)",
        ),
        sa.Column(
            "bio",
            sa.Text(),
            nullable=True,
            comment="Short biography or description of the user",
        ),
        sa.Column(
            "timezone",
            sa.String(length=50),
            nullable=True,
            comment="User's preferred timezone in IANA format",
        ),
        sa.Column(
            "locale",
            sa.String(length=10),
            nullable=True,
            comment="User's preferred locale (e.g., en-US)",
        ),
        sa.Column(
            "status",
            sa.String(length=20),
            nullable=False,
            comment="Current status of the user account",
        ),
        sa.Column(
            "role",
            sa.String(length=20),
            nullable=False,
            comment="Role of the user for access control",
        ),
        sa.Column(
            "is_verified",
            sa.Boolean(),
            nullable=False,
            comment="Indicates if the user's email is verified",
        ),
        sa.Column(
            "is_active",
            sa.Boolean(),
            nullable=False,
            comment="Indicates if the user account is active",
        ),
        sa.Column(
            "is_superuser",
            sa.Boolean(),
            nullable=False,
            comment="Indicates if the user has superuser privileges",
        ),
        sa.Column(
            "mfa_enabled",
            sa.Boolean(),
            nullable=False,
            comment="Indicates if multi-factor authentication is enabled",
        ),
        sa.Column(
            "mfa_secret",
            sa.String(length=255),
            nullable=True,
            comment="TOTP secret for MFA",
        ),
        sa.Column(
            "failed_login_attempts",
            sa.Integer(),
            nullable=False,
            comment="Consecutive failed login attempts",
        ),
        sa.Column(
            "oauth_accounts",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=True,
            comment="Connected OAuth accounts data",
        ),
        sa.Column(
            "external_id",
            sa.String(length=255),
            nullable=True,
            comment="External system user ID",
        ),
        sa.Column(
            "email_verification_token",
            sa.String(length=255),
            nullable=True,
            comment="Email verification token",
        ),
        sa.Column(
            "email_verification_expires",
            sa.DateTime(timezone=True),
            nullable=True,
            comment="Email verification token expiration",
        ),
        sa.Column(
            "password_reset_token",
            sa.String(length=255),
            nullable=True,
            comment="Password reset token",
        ),
        sa.Column(
            "password_reset_expires",
            sa.DateTime(timezone=True),
            nullable=True,
            comment="Password reset token expiration",
        ),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.CheckConstraint(
            "email ~* '^[A-Za-z0-9._%%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$'",
            name="valid_email_format",
        ),
        sa.CheckConstraint(
            "LENGTH(username) >= 3 OR username IS NULL", name="username_min_length"
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("email_verification_token"),
        sa.UniqueConstraint("id"),
        sa.UniqueConstraint("password_reset_token"),
    )
    op.create_index(
        "idx_user_created_status", "user", ["created_at", "status"], unique=False
    )
    op.create_index("idx_user_email_status", "user", ["email", "status"], unique=False)
    op.create_index("idx_user_role_status", "user", ["role", "status"], unique=False)
    op.create_index(op.f("ix_user_email"), "user", ["email"], unique=True)
    op.create_index(op.f("ix_user_external_id"), "user", ["external_id"], unique=False)
    op.create_index(op.f("ix_user_username"), "user", ["username"], unique=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_user_username"), table_name="user")
    op.drop_index(op.f("ix_user_external_id"), table_name="user")
    op.drop_index(op.f("ix_user_email"), table_name="user")
    op.drop_index("idx_user_role_status", table_name="user")
    op.drop_index("idx_user_email_status", table_name="user")
    op.drop_index("idx_user_created_status", table_name="user")
    op.drop_table("user")
    # ### end Alembic commands ###
