"""add tasks

Revision ID: d80f835b08ad
Revises: 87689d9b7669
Create Date: 2025-06-28 10:02:27.015986+00:00

ðŸš§ SMITHY MIGRATION ðŸš§
This file was automatically forged by Alembic.
Edit only if you know what you're doing.
"""

from typing import Sequence, Union

from alembic import op  # type: ignore
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "d80f835b08ad"
down_revision: Union[str, Sequence[str], None] = "87689d9b7669"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "tasks",
        sa.Column("title", sa.String(length=500), nullable=False, comment="Task title"),
        sa.Column(
            "description", sa.Text(), nullable=True, comment="Detailed task description"
        ),
        sa.Column(
            "project_id",
            sa.UUID(),
            nullable=False,
            comment="Project this task belongs to",
        ),
        sa.Column(
            "task_number",
            sa.Integer(),
            nullable=False,
            comment="Sequential task number within project (e.g., 1, 2, 3...)",
        ),
        sa.Column(
            "parent_task_id",
            sa.UUID(),
            nullable=True,
            comment="Parent task for subtasks",
        ),
        sa.Column(
            "reporter_id",
            sa.UUID(),
            nullable=False,
            comment="User who created/reported this task",
        ),
        sa.Column(
            "status",
            sa.Enum(
                "TODO",
                "IN_PROGRESS",
                "IN_REVIEW",
                "BLOCKED",
                "DONE",
                "CANCELLED",
                name="taskstatus",
            ),
            nullable=False,
            comment="Current task status",
        ),
        sa.Column(
            "priority",
            sa.Enum("LOWEST", "LOW", "MEDIUM", "HIGH", "HIGHEST", name="taskpriority"),
            nullable=False,
            comment="Task priority level",
        ),
        sa.Column(
            "task_type",
            sa.Enum(
                "FEATURE",
                "BUG",
                "IMPROVEMENT",
                "DOCUMENTATION",
                "RESEARCH",
                "MAINTENANCE",
                "TESTING",
                name="tasktype",
            ),
            nullable=False,
            comment="Task type/category",
        ),
        sa.Column(
            "due_date",
            sa.DateTime(timezone=True),
            nullable=True,
            comment="Task due date",
        ),
        sa.Column(
            "start_date",
            sa.DateTime(timezone=True),
            nullable=True,
            comment="When work started",
        ),
        sa.Column(
            "completed_at",
            sa.DateTime(timezone=True),
            nullable=True,
            comment="When task was completed",
        ),
        sa.Column(
            "estimated_hours",
            sa.Float(),
            nullable=True,
            comment="Estimated hours to complete",
        ),
        sa.Column(
            "logged_hours", sa.Float(), nullable=False, comment="Actual hours logged"
        ),
        sa.Column(
            "story_points", sa.Integer(), nullable=True, comment="Story points estimate"
        ),
        sa.Column("labels", sa.JSON(), nullable=True, comment="Task labels/tags"),
        sa.Column(
            "custom_fields", sa.JSON(), nullable=True, comment="Custom field values"
        ),
        sa.Column(
            "external_id",
            sa.String(length=255),
            nullable=True,
            comment="External system ID (GitHub, Jira, etc.)",
        ),
        sa.Column(
            "external_url",
            sa.String(length=500),
            nullable=True,
            comment="External system URL",
        ),
        sa.Column(
            "deleted_at",
            sa.DateTime(timezone=True),
            nullable=True,
            comment="Soft deletion timestamp",
        ),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.CheckConstraint(
            "estimated_hours IS NULL OR estimated_hours >= 0",
            name="positive_estimated_hours",
        ),
        sa.CheckConstraint("logged_hours >= 0", name="positive_logged_hours"),
        sa.CheckConstraint(
            "start_date IS NULL OR due_date IS NULL OR start_date <= due_date",
            name="valid_task_date_range",
        ),
        sa.CheckConstraint(
            "story_points IS NULL OR story_points >= 0", name="positive_story_points"
        ),
        sa.CheckConstraint("task_number > 0", name="positive_task_number"),
        sa.ForeignKeyConstraint(["parent_task_id"], ["tasks.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["project_id"], ["projects.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["reporter_id"], ["users.id"], ondelete="SET NULL"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint(
            "project_id", "task_number", name="unique_task_number_per_project"
        ),
    )
    op.create_index(
        "idx_task_deleted", "tasks", ["deleted_at", "project_id"], unique=False
    )
    op.create_index("idx_task_due_date", "tasks", ["due_date", "status"], unique=False)
    op.create_index(
        "idx_task_hierarchy", "tasks", ["parent_task_id", "project_id"], unique=False
    )
    op.create_index(
        "idx_task_project_priority", "tasks", ["project_id", "priority"], unique=False
    )
    op.create_index(
        "idx_task_project_status", "tasks", ["project_id", "status"], unique=False
    )
    op.create_index(op.f("ix_tasks_deleted_at"), "tasks", ["deleted_at"], unique=False)
    op.create_index(
        op.f("ix_tasks_parent_task_id"), "tasks", ["parent_task_id"], unique=False
    )
    op.create_index(op.f("ix_tasks_priority"), "tasks", ["priority"], unique=False)
    op.create_index(op.f("ix_tasks_project_id"), "tasks", ["project_id"], unique=False)
    op.create_index(
        op.f("ix_tasks_reporter_id"), "tasks", ["reporter_id"], unique=False
    )
    op.create_index(op.f("ix_tasks_status"), "tasks", ["status"], unique=False)
    op.create_index(op.f("ix_tasks_task_type"), "tasks", ["task_type"], unique=False)
    op.create_table(
        "task_assignees",
        sa.Column("task_id", sa.UUID(), nullable=False, comment="Task ID"),
        sa.Column("user_id", sa.UUID(), nullable=False, comment="Assigned user ID"),
        sa.Column(
            "assigned_by",
            sa.UUID(),
            nullable=False,
            comment="User who made this assignment",
        ),
        sa.Column(
            "assigned_at",
            sa.DateTime(timezone=True),
            nullable=False,
            comment="When user was assigned",
        ),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(["assigned_by"], ["users.id"], ondelete="SET NULL"),
        sa.ForeignKeyConstraint(["task_id"], ["tasks.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("task_id", "user_id", name="unique_task_assignee"),
    )
    op.create_index(
        "idx_task_assignee_task", "task_assignees", ["task_id"], unique=False
    )
    op.create_index(
        "idx_task_assignee_user", "task_assignees", ["user_id"], unique=False
    )
    op.create_table(
        "task_attachments",
        sa.Column(
            "task_id",
            sa.UUID(),
            nullable=False,
            comment="Task this attachment belongs to",
        ),
        sa.Column(
            "uploaded_by",
            sa.UUID(),
            nullable=False,
            comment="User who uploaded this file",
        ),
        sa.Column(
            "filename",
            sa.String(length=255),
            nullable=False,
            comment="Original filename",
        ),
        sa.Column(
            "file_path",
            sa.String(length=500),
            nullable=False,
            comment="Storage path/URL",
        ),
        sa.Column(
            "file_size", sa.Integer(), nullable=False, comment="File size in bytes"
        ),
        sa.Column(
            "content_type", sa.String(length=100), nullable=False, comment="MIME type"
        ),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.CheckConstraint("file_size > 0", name="positive_file_size"),
        sa.ForeignKeyConstraint(["task_id"], ["tasks.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["uploaded_by"], ["users.id"], ondelete="SET NULL"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "idx_attachment_task", "task_attachments", ["task_id"], unique=False
    )
    op.create_index(
        op.f("ix_task_attachments_task_id"),
        "task_attachments",
        ["task_id"],
        unique=False,
    )
    op.create_table(
        "task_comments",
        sa.Column(
            "task_id", sa.UUID(), nullable=False, comment="Task this comment belongs to"
        ),
        sa.Column(
            "author_id",
            sa.UUID(),
            nullable=False,
            comment="User who wrote this comment",
        ),
        sa.Column(
            "content",
            sa.Text(),
            nullable=False,
            comment="Comment content (markdown supported)",
        ),
        sa.Column(
            "parent_comment_id",
            sa.UUID(),
            nullable=True,
            comment="Parent comment for replies",
        ),
        sa.Column(
            "deleted_at",
            sa.DateTime(timezone=True),
            nullable=True,
            comment="Soft deletion timestamp",
        ),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(["author_id"], ["users.id"], ondelete="SET NULL"),
        sa.ForeignKeyConstraint(
            ["parent_comment_id"], ["task_comments.id"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(["task_id"], ["tasks.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index("idx_comment_author", "task_comments", ["author_id"], unique=False)
    op.create_index(
        "idx_comment_task", "task_comments", ["task_id", "created_at"], unique=False
    )
    op.create_index(
        op.f("ix_task_comments_task_id"), "task_comments", ["task_id"], unique=False
    )
    op.create_table(
        "task_dependencies",
        sa.Column(
            "blocking_task_id",
            sa.UUID(),
            nullable=False,
            comment="Task that blocks another task",
        ),
        sa.Column(
            "blocked_task_id", sa.UUID(), nullable=False, comment="Task that is blocked"
        ),
        sa.Column(
            "created_by",
            sa.UUID(),
            nullable=False,
            comment="User who created this dependency",
        ),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(["blocked_task_id"], ["tasks.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["blocking_task_id"], ["tasks.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["created_by"], ["users.id"], ondelete="SET NULL"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint(
            "blocking_task_id", "blocked_task_id", name="unique_task_dependency"
        ),
    )
    op.create_index(
        "idx_dependency_blocked", "task_dependencies", ["blocked_task_id"], unique=False
    )
    op.create_index(
        "idx_dependency_blocking",
        "task_dependencies",
        ["blocking_task_id"],
        unique=False,
    )
    op.create_table(
        "task_time_logs",
        sa.Column(
            "task_id",
            sa.UUID(),
            nullable=False,
            comment="Task this time log belongs to",
        ),
        sa.Column(
            "user_id", sa.UUID(), nullable=False, comment="User who logged this time"
        ),
        sa.Column("hours", sa.Float(), nullable=False, comment="Hours worked"),
        sa.Column(
            "description", sa.Text(), nullable=True, comment="Description of work done"
        ),
        sa.Column(
            "date_worked",
            sa.DateTime(timezone=True),
            nullable=False,
            comment="Date when work was done",
        ),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.CheckConstraint("hours > 0", name="positive_hours"),
        sa.ForeignKeyConstraint(["task_id"], ["tasks.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], ondelete="SET NULL"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "idx_time_log_task", "task_time_logs", ["task_id", "date_worked"], unique=False
    )
    op.create_index(
        "idx_time_log_user", "task_time_logs", ["user_id", "date_worked"], unique=False
    )
    op.create_index(
        op.f("ix_task_time_logs_task_id"), "task_time_logs", ["task_id"], unique=False
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_task_time_logs_task_id"), table_name="task_time_logs")
    op.drop_index("idx_time_log_user", table_name="task_time_logs")
    op.drop_index("idx_time_log_task", table_name="task_time_logs")
    op.drop_table("task_time_logs")
    op.drop_index("idx_dependency_blocking", table_name="task_dependencies")
    op.drop_index("idx_dependency_blocked", table_name="task_dependencies")
    op.drop_table("task_dependencies")
    op.drop_index(op.f("ix_task_comments_task_id"), table_name="task_comments")
    op.drop_index("idx_comment_task", table_name="task_comments")
    op.drop_index("idx_comment_author", table_name="task_comments")
    op.drop_table("task_comments")
    op.drop_index(op.f("ix_task_attachments_task_id"), table_name="task_attachments")
    op.drop_index("idx_attachment_task", table_name="task_attachments")
    op.drop_table("task_attachments")
    op.drop_index("idx_task_assignee_user", table_name="task_assignees")
    op.drop_index("idx_task_assignee_task", table_name="task_assignees")
    op.drop_table("task_assignees")
    op.drop_index(op.f("ix_tasks_task_type"), table_name="tasks")
    op.drop_index(op.f("ix_tasks_status"), table_name="tasks")
    op.drop_index(op.f("ix_tasks_reporter_id"), table_name="tasks")
    op.drop_index(op.f("ix_tasks_project_id"), table_name="tasks")
    op.drop_index(op.f("ix_tasks_priority"), table_name="tasks")
    op.drop_index(op.f("ix_tasks_parent_task_id"), table_name="tasks")
    op.drop_index(op.f("ix_tasks_deleted_at"), table_name="tasks")
    op.drop_index("idx_task_project_status", table_name="tasks")
    op.drop_index("idx_task_project_priority", table_name="tasks")
    op.drop_index("idx_task_hierarchy", table_name="tasks")
    op.drop_index("idx_task_due_date", table_name="tasks")
    op.drop_index("idx_task_deleted", table_name="tasks")
    op.drop_table("tasks")
    # ### end Alembic commands ###
