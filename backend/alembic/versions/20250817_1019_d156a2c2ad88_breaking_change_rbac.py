"""BREAKING_CHANGE_replace_old_roles_with_rbac_v0_4_0

Revision ID: d156a2c2ad88
Revises: 3b7b1c985503
Create Date: 2025-08-17 10:19:12.430762+00:00

ðŸš§ SMITHY MIGRATION ðŸš§
This file was automatically forged by Alembic.
Edit only if you know what you're doing.
"""

from typing import Sequence, Union

from alembic import op  # type: ignore
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "d156a2c2ad88"
down_revision: Union[str, Sequence[str], None] = "3b7b1c985503"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "permissions",
        sa.Column(
            "name",
            sa.String(),
            nullable=False,
            comment="Unique permission identifier (e.g., 'project.create')",
        ),
        sa.Column(
            "resource_type",
            sa.Enum(
                "SYSTEM", "ORGANIZATION", "PROJECT", "TASK", "USER", name="resourcetype"
            ),
            nullable=False,
            comment="Type of resource this permission controls",
        ),
        sa.Column(
            "action",
            sa.Enum(
                "CREATE",
                "READ",
                "UPDATE",
                "DELETE",
                "MANAGE",
                "INVITE",
                "ASSIGN",
                name="actiontype",
            ),
            nullable=False,
            comment="Action that can be performed",
        ),
        sa.Column(
            "description",
            sa.Text(),
            nullable=False,
            comment="Human-readable description of what this permission allows",
        ),
        sa.Column(
            "is_system",
            sa.Boolean(),
            nullable=False,
            comment="Whether this is a system-only permission",
        ),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.CheckConstraint(
            "name = resource_type || '.' || action", name="permission_name_consistency"
        ),
        sa.CheckConstraint(
            "name ~ '^[a-z_]+\\.[a-z_]+$'", name="permission_name_format"
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "idx_permission_resource_action",
        "permissions",
        ["resource_type", "action"],
        unique=False,
    )
    op.create_index("idx_permission_system", "permissions", ["is_system"], unique=False)
    op.create_index(
        op.f("ix_permissions_action"), "permissions", ["action"], unique=False
    )
    op.create_index(op.f("ix_permissions_name"), "permissions", ["name"], unique=True)
    op.create_index(
        op.f("ix_permissions_resource_type"),
        "permissions",
        ["resource_type"],
        unique=False,
    )
    op.create_table(
        "roles",
        sa.Column(
            "name", sa.String(), nullable=False, comment="Human-readable role name"
        ),
        sa.Column(
            "slug",
            sa.String(),
            nullable=False,
            comment="Machine-readable role identifier",
        ),
        sa.Column(
            "scope",
            sa.Enum("SYSTEM", "ORGANIZATION", "PROJECT", name="rolescope"),
            nullable=False,
            comment="Scope level where this role applies",
        ),
        sa.Column(
            "description",
            sa.Text(),
            nullable=True,
            comment="Description of role responsibilities",
        ),
        sa.Column(
            "is_system",
            sa.Boolean(),
            nullable=False,
            comment="Whether this is a protected system role",
        ),
        sa.Column(
            "is_active",
            sa.Boolean(),
            nullable=False,
            comment="Whether this role is active and can be assigned",
        ),
        sa.Column(
            "color", sa.String(), nullable=True, comment="Hex color for UI display"
        ),
        sa.Column(
            "created_by", sa.UUID(), nullable=True, comment="User who created this role"
        ),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.CheckConstraint(
            "color IS NULL OR color ~ '^#[0-9A-Fa-f]{6}$'", name="role_color_format"
        ),
        sa.CheckConstraint("slug ~ '^[a-z0-9_\\.]+$'", name="role_slug_format"),
        sa.ForeignKeyConstraint(["created_by"], ["users.id"], ondelete="SET NULL"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name", "scope", name="unique_role_name_per_scope"),
    )
    op.create_index(
        "idx_role_scope_active", "roles", ["scope", "is_active"], unique=False
    )
    op.create_index("idx_role_system", "roles", ["is_system"], unique=False)
    op.create_index(op.f("ix_roles_name"), "roles", ["name"], unique=False)
    op.create_index(op.f("ix_roles_scope"), "roles", ["scope"], unique=False)
    op.create_index(op.f("ix_roles_slug"), "roles", ["slug"], unique=True)
    op.create_table(
        "role_permissions",
        sa.Column("role_id", sa.UUID(), nullable=False, comment="Role ID"),
        sa.Column("permission_id", sa.UUID(), nullable=False, comment="Permission ID"),
        sa.Column(
            "granted_at",
            sa.DateTime(timezone=True),
            nullable=False,
            comment="When permission was granted to role",
        ),
        sa.Column(
            "granted_by",
            sa.UUID(),
            nullable=True,
            comment="User who granted this permission to the role",
        ),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(["granted_by"], ["users.id"], ondelete="SET NULL"),
        sa.ForeignKeyConstraint(
            ["permission_id"], ["permissions.id"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(["role_id"], ["roles.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("role_id", "permission_id", name="unique_role_permission"),
    )
    op.create_index(
        "idx_role_permission_granted", "role_permissions", ["granted_at"], unique=False
    )
    op.create_index(
        "idx_role_permission_permission",
        "role_permissions",
        ["permission_id"],
        unique=False,
    )
    op.create_index(
        "idx_role_permission_role", "role_permissions", ["role_id"], unique=False
    )
    op.create_table(
        "user_roles",
        sa.Column("user_id", sa.UUID(), nullable=False, comment="User ID"),
        sa.Column("role_id", sa.UUID(), nullable=False, comment="Role ID"),
        sa.Column(
            "resource_id",
            sa.UUID(),
            nullable=True,
            comment="ID of the resource (organization/project) this role applies to",
        ),
        sa.Column(
            "resource_type",
            sa.Enum(
                "SYSTEM", "ORGANIZATION", "PROJECT", "TASK", "USER", name="resourcetype"
            ),
            nullable=False,
            comment="Type of resource this role assignment applies to",
        ),
        sa.Column(
            "granted_at",
            sa.DateTime(timezone=True),
            nullable=False,
            comment="When role was granted to user",
        ),
        sa.Column(
            "granted_by", sa.UUID(), nullable=True, comment="User who granted this role"
        ),
        sa.Column(
            "expires_at",
            sa.DateTime(timezone=True),
            nullable=True,
            comment="When this role assignment expires (null = never)",
        ),
        sa.Column(
            "is_active",
            sa.Boolean(),
            nullable=False,
            comment="Whether this role assignment is currently active",
        ),
        sa.Column(
            "notes",
            sa.Text(),
            nullable=True,
            comment="Optional notes about this role assignment",
        ),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.CheckConstraint(
            "(resource_type = 'SYSTEM' AND resource_id IS NULL) OR (resource_type != 'SYSTEM' AND resource_id IS NOT NULL)",
            name="system_role_no_resource",
        ),
        sa.CheckConstraint(
            "expires_at IS NULL OR expires_at > granted_at", name="valid_expiration"
        ),
        sa.ForeignKeyConstraint(["granted_by"], ["users.id"], ondelete="SET NULL"),
        sa.ForeignKeyConstraint(["role_id"], ["roles.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint(
            "user_id",
            "role_id",
            "resource_id",
            "resource_type",
            name="unique_user_role_resource",
        ),
    )
    op.create_index("idx_user_role_active", "user_roles", ["is_active"], unique=False)
    op.create_index(
        "idx_user_role_expiration",
        "user_roles",
        ["expires_at", "is_active"],
        unique=False,
    )
    op.create_index("idx_user_role_granted", "user_roles", ["granted_at"], unique=False)
    op.create_index(
        "idx_user_role_resource",
        "user_roles",
        ["resource_type", "resource_id", "is_active"],
        unique=False,
    )
    op.create_index(
        "idx_user_role_user", "user_roles", ["user_id", "is_active"], unique=False
    )
    op.drop_index(op.f("idx_project_members"), table_name="project_members")
    op.drop_index(op.f("idx_user_projects"), table_name="project_members")
    op.drop_table("project_members")
    op.drop_index(op.f("idx_org_member_role"), table_name="organization_members")
    op.drop_index(op.f("idx_org_member_status"), table_name="organization_members")
    op.drop_index(op.f("idx_user_orgs_active"), table_name="organization_members")
    op.drop_index(
        op.f("ix_organization_members_role"), table_name="organization_members"
    )
    op.drop_index(
        op.f("ix_organization_members_status"), table_name="organization_members"
    )
    op.drop_table("organization_members")
    op.add_column(
        "organizations",
        sa.Column(
            "require_email_verification",
            sa.Boolean(),
            nullable=False,
            server_default="true",
            comment="Require email verification for new members",
        ),
    )
    op.add_column(
        "organizations",
        sa.Column(
            "allow_guest_access",
            sa.Boolean(),
            nullable=False,
            server_default="false",
            comment="Allow temporary guest access to projects",
        ),
    )
    op.add_column(
        "organizations",
        sa.Column(
            "is_active",
            sa.Boolean(),
            nullable=False,
            server_default="true",
            comment="Organization active status",
        ),
    )
    op.alter_column(
        "organizations",
        "company_size",
        existing_type=postgresql.ENUM(
            "SMALL", "MEDIUM", "LARGE", "ENTERPRISE", "SOLO", name="organizationsize"
        ),
        comment="Size category of organization",
        existing_comment="Size of the organization",
        existing_nullable=False,
    )
    op.alter_column(
        "organizations",
        "public_projects",
        existing_type=sa.BOOLEAN(),
        comment="Allow public projects visible to non-members",
        existing_comment="Allow public project visibility",
        existing_nullable=False,
    )
    op.alter_column(
        "organizations",
        "max_members",
        existing_type=sa.INTEGER(),
        comment="Maximum number of members",
        existing_comment="Maximum number of members allowed",
        existing_nullable=False,
    )
    op.alter_column(
        "organizations",
        "max_projects",
        existing_type=sa.INTEGER(),
        comment="Maximum number of projects",
        existing_comment="Maximum number of projects allowed",
        existing_nullable=False,
    )
    op.drop_column("organizations", "features")
    op.drop_column("organizations", "settings")
    op.drop_column("organizations", "integrations")
    op.drop_column("organizations", "require_2fa")
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "organizations",
        sa.Column(
            "require_2fa",
            sa.BOOLEAN(),
            autoincrement=False,
            nullable=False,
            comment="Require 2FA for all members",
        ),
    )
    op.add_column(
        "organizations",
        sa.Column(
            "integrations",
            postgresql.JSON(astext_type=sa.Text()),
            autoincrement=False,
            nullable=True,
            comment="External integrations configuration",
        ),
    )
    op.add_column(
        "organizations",
        sa.Column(
            "settings",
            postgresql.JSON(astext_type=sa.Text()),
            autoincrement=False,
            nullable=True,
            comment="Organization configuration",
        ),
    )
    op.add_column(
        "organizations",
        sa.Column(
            "features",
            postgresql.JSON(astext_type=sa.Text()),
            autoincrement=False,
            nullable=True,
            comment="Enabled features and feature flags",
        ),
    )
    op.alter_column(
        "organizations",
        "max_projects",
        existing_type=sa.INTEGER(),
        comment="Maximum number of projects allowed",
        existing_comment="Maximum number of projects",
        existing_nullable=False,
    )
    op.alter_column(
        "organizations",
        "max_members",
        existing_type=sa.INTEGER(),
        comment="Maximum number of members allowed",
        existing_comment="Maximum number of members",
        existing_nullable=False,
    )
    op.alter_column(
        "organizations",
        "public_projects",
        existing_type=sa.BOOLEAN(),
        comment="Allow public project visibility",
        existing_comment="Allow public projects visible to non-members",
        existing_nullable=False,
    )
    op.alter_column(
        "organizations",
        "company_size",
        existing_type=postgresql.ENUM(
            "SMALL", "MEDIUM", "LARGE", "ENTERPRISE", "SOLO", name="organizationsize"
        ),
        comment="Size of the organization",
        existing_comment="Size category of organization",
        existing_nullable=False,
    )
    op.drop_column("organizations", "is_active")
    op.drop_column("organizations", "allow_guest_access")
    op.drop_column("organizations", "require_email_verification")
    op.create_table(
        "organization_members",
        sa.Column(
            "user_id", sa.UUID(), autoincrement=False, nullable=False, comment="User ID"
        ),
        sa.Column(
            "organization_id",
            sa.UUID(),
            autoincrement=False,
            nullable=False,
            comment="Organization ID",
        ),
        sa.Column(
            "role",
            postgresql.ENUM(
                "OWNER",
                "ADMIN",
                "MANAGER",
                "MEMBER",
                "VIEWER",
                "GUEST",
                name="organizationrole",
            ),
            autoincrement=False,
            nullable=False,
            comment="Member role within organization",
        ),
        sa.Column(
            "status",
            postgresql.ENUM(
                "ACTIVE", "PENDING", "SUSPENDED", "LEFT", name="memberstatus"
            ),
            autoincrement=False,
            nullable=False,
            comment="Member status",
        ),
        sa.Column(
            "invited_by",
            sa.UUID(),
            autoincrement=False,
            nullable=True,
            comment="User who invited this member",
        ),
        sa.Column(
            "invited_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
            comment="Invitation timestamp",
        ),
        sa.Column(
            "joined_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
            comment="When member accepted invitation",
        ),
        sa.Column(
            "last_active_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
            comment="Last activity in organization",
        ),
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["invited_by"],
            ["users.id"],
            name=op.f("organization_members_invited_by_fkey"),
            ondelete="SET NULL",
        ),
        sa.ForeignKeyConstraint(
            ["organization_id"],
            ["organizations.id"],
            name=op.f("organization_members_organization_id_fkey"),
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name=op.f("organization_members_user_id_fkey"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("organization_members_pkey")),
        sa.UniqueConstraint(
            "user_id",
            "organization_id",
            name=op.f("unique_user_org"),
            postgresql_include=[],
            postgresql_nulls_not_distinct=False,
        ),
    )
    op.create_index(
        op.f("ix_organization_members_status"),
        "organization_members",
        ["status"],
        unique=False,
    )
    op.create_index(
        op.f("ix_organization_members_role"),
        "organization_members",
        ["role"],
        unique=False,
    )
    op.create_index(
        op.f("idx_user_orgs_active"),
        "organization_members",
        ["user_id", "status"],
        unique=False,
    )
    op.create_index(
        op.f("idx_org_member_status"),
        "organization_members",
        ["organization_id", "status"],
        unique=False,
    )
    op.create_index(
        op.f("idx_org_member_role"),
        "organization_members",
        ["organization_id", "role"],
        unique=False,
    )
    op.create_table(
        "project_members",
        sa.Column(
            "project_id",
            sa.UUID(),
            autoincrement=False,
            nullable=False,
            comment="Project ID",
        ),
        sa.Column(
            "user_id", sa.UUID(), autoincrement=False, nullable=False, comment="User ID"
        ),
        sa.Column(
            "role",
            postgresql.ENUM(
                "LEAD", "DEVELOPER", "REVIEWER", "VIEWER", name="projectrole"
            ),
            autoincrement=False,
            nullable=False,
            comment="Role within this project",
        ),
        sa.Column(
            "added_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
            comment="When user was added to project",
        ),
        sa.Column(
            "added_by",
            sa.UUID(),
            autoincrement=False,
            nullable=True,
            comment="Who added this user to project",
        ),
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["added_by"],
            ["users.id"],
            name=op.f("project_members_added_by_fkey"),
            ondelete="SET NULL",
        ),
        sa.ForeignKeyConstraint(
            ["project_id"],
            ["projects.id"],
            name=op.f("project_members_project_id_fkey"),
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name=op.f("project_members_user_id_fkey"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("project_members_pkey")),
        sa.UniqueConstraint(
            "project_id",
            "user_id",
            name=op.f("unique_project_member"),
            postgresql_include=[],
            postgresql_nulls_not_distinct=False,
        ),
    )
    op.create_index(
        op.f("idx_user_projects"), "project_members", ["user_id", "role"], unique=False
    )
    op.create_index(
        op.f("idx_project_members"),
        "project_members",
        ["project_id", "role"],
        unique=False,
    )
    op.drop_index("idx_user_role_user", table_name="user_roles")
    op.drop_index("idx_user_role_resource", table_name="user_roles")
    op.drop_index("idx_user_role_granted", table_name="user_roles")
    op.drop_index("idx_user_role_expiration", table_name="user_roles")
    op.drop_index("idx_user_role_active", table_name="user_roles")
    op.drop_table("user_roles")
    op.drop_index("idx_role_permission_role", table_name="role_permissions")
    op.drop_index("idx_role_permission_permission", table_name="role_permissions")
    op.drop_index("idx_role_permission_granted", table_name="role_permissions")
    op.drop_table("role_permissions")
    op.drop_index(op.f("ix_roles_slug"), table_name="roles")
    op.drop_index(op.f("ix_roles_scope"), table_name="roles")
    op.drop_index(op.f("ix_roles_name"), table_name="roles")
    op.drop_index("idx_role_system", table_name="roles")
    op.drop_index("idx_role_scope_active", table_name="roles")
    op.drop_table("roles")
    op.drop_index(op.f("ix_permissions_resource_type"), table_name="permissions")
    op.drop_index(op.f("ix_permissions_name"), table_name="permissions")
    op.drop_index(op.f("ix_permissions_action"), table_name="permissions")
    op.drop_index("idx_permission_system", table_name="permissions")
    op.drop_index("idx_permission_resource_action", table_name="permissions")
    op.drop_table("permissions")
    # ### end Alembic commands ###
